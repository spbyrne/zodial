:root {
.site {
  &__header {
    display: none;
    @include for-small {
      display: block;
    }
  }
  &__wrapper {
    position: relative;
    flex: 1 0 auto;
  }
  &__footer {
    padding-top: 0.5rem;
    flex-shrink: 0;
  }
  &__title {
    font-size: 0.9rem;
    text-transform: uppercase;
    color: $color-light;
    margin: 0;
    a {
      text-decoration: none;
      color: inherit;
    }
  }
}

.breadcrumb {
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
  flex-direction: row;
  justify-content: flex-start;
  margin-bottom: 0.5rem;
  position: relative;
  z-index: 300;
  &__item {
    position: relative;
    display: inline-block;
    &:not(:last-child) {
      margin-right: 0.5rem;
      padding-right: 0.5rem;
      &:after {
        font-size: 0.8rem;
        line-height: 1;
        content: '/';
        position: absolute;
        text-align: center;
        right: 0;
        top: 0;
        display: inline-block;
        color: $color-pearl;
        transform: translate3d(0.15rem,0,0);
      }
    }
  }
  &__link {
    line-height: 1;
    font-size: 0.7rem;
    font-weight: 600;
    text-transform: uppercase;
    text-decoration: none;
    display: block;
    color: mix($color-dark,$color-pearl,25%);
    &.active {
      color: $color-primary;
      text-decoration: none;
      font-weight: bold;
      pointer-events: none;
    }
  }
}

.container {
  padding: 0 1rem 0 1rem;
  margin: 0 auto;
  max-width: 40rem;
  position: relative;
  @include for-small {
    padding: 0 1rem 0 8rem;
  }
  &.pad-top {
    margin-top: 1rem;
  }
}

.animate {
  position: relative;
  animation-name: animateIn;
  animation-duration: $time-long;
  animation-timing-function: $easing;
  animation-fill-mode: both;
  &--second {
    animation-delay: .04s;
  }
  &--third {
    animation-delay: .08s;
  }
  &--fourth {
    animation-delay: .12s;
  }
  &--cascade-children {
    >* {
      position: relative;
      animation-name: slideUpIn;
      animation-iteration-count: 1;
      animation-timing-function: $easing;
      animation-fill-mode: both;
      transition: all $time $easing;
      @for $i from 0 through 12 {
        &:nth-child(#{$i + 1}) {
          animation-delay: $i * 0.04s;
          animation-duration: 0.35s - ($i * 0.015s);
        }
      }
    }
  }
  .is-exiting & {
    animation-name: animateOut;
    animation-duration: $time;
    animation-timing-function: $easing-in;
    animation-fill-mode: both;
    animation-delay: 0s;
  }
}

.info {
  display: flex;
  justify-content: flex-start;
  flex-direction: row;
  flex-wrap: wrap;
  &__item {
    position: relative;
    flex: 1 1 30%;
    padding: 0 1rem 0.5rem 0;
    &--wide {
      flex-basis: 100%;
      .info__data {
        white-space: normal;
      }
    }
  }
  &__label {
    font-weight: 700;
    line-height: 1;
    font-size: 0.9rem;
    text-transform: uppercase;
    opacity: 1;
    display: block;
    color: $color-primary;
    white-space: nowrap;
    margin-bottom: 0.125rem;
  }
  &__meta {
    color: $color-dark;
    opacity: 0.3;
    display: inline-block;
    .info__label & {
      margin-left: 0.5rem;
      &:before {
        content: 'â€“';
        display: inline-block;
        margin-right: 0.3rem;
      }
    }
  }
  &__data {
    display: block;
    font-size: 1.1rem;
    line-height: 1.2;
    white-space: nowrap;
    font-family: $font-accent;
    font-weight: $font-accent--weight;
  }
}

.button-list {
  display: inline-flex;
  flex-direction: column;
  justify-content: center;
  box-pack: center;
  align-items: flex-start;
  box-orient: vertical;
  box-direction: normal;
  position: relative;
  &__item {
    position: relative;
    flex: 0 1 auto;
    width: 100%;
    padding: 0.25rem 1rem;
    background-color: $color-primary;
    margin-bottom: 2px;
    transition: all 0.1s $easing;
    &:first-child {
      border-radius: $border-radius $border-radius 0 0;
    }
    &:last-child {
      border-radius: 0 0 $border-radius $border-radius;
    }
    &:hover {
      opacity: 0.9;
    }
  }
  &__link,
  a.button-list__link {
    text-decoration: none;
    color: $color-light;
    font-weight: 600;
  }
}

.sentence-list {
  &__item {
    display: inline-block;
    &:not(:last-child) {
      &:after {
        content: ',';
        margin-right: 0.3em;
      }
    }
    &:last-child {
      &:before {
        content: 'and\0020';
      }
    }
  }
  &__link {}
}

.header-bar {
  position: relative;
  &:after {
    content: '';
    display: block;
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: $color-pearl;
    opacity: 0.5;
  }
  &__title {
    color: $color-light;
    line-height: 1;
    white-space: nowrap;
    display: none;
  }
  &__nav {
    position: absolute;
    right: 0;
  }
}

.main-nav {
  position: relative;
  transition: all $time $easing;
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
  flex-direction: row;
  justify-content: flex-start;
  &__item {
    position: relative;
    display: inline-block;
    margin-right: 1rem;
  }
  &__link,
  a.main-nav__link {
    position: relative;
    display: block;
    line-height: 1;
    transition: all $time $easing;
    color: $color-dark;
    font-weight: 700;
    font-size: 0.85rem;
    text-decoration: none;
    opacity: 0.5;
    letter-spacing: 0.5px;
    padding: 1rem 0;
    text-align: center;
    &:after {
      display: block;
      content: attr(title);
      font-weight: bold;
      height: 0;
      overflow: hidden;
      visibility: hidden;
    }
    &:before {
      content: '';
      display: block;
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 2px;
      background: $color-gold;
      opacity: 1;
      transform-origin: 0 50%;
      transform: scale3d(0, 1, 1);
    }
    &:hover {
      color: $color-loading;
      opacity: 1;
    }
    &:active {
      color: $color-active;
      opacity: 1;
    }
    &.active {
      pointer-events: none;
      opacity: 1;
      color: $color-primary;
      &:before {
        transform: scale3d(1, 1, 1);
      }
    }
    &.loading {
      color: $color-active;
      opacity: 1;
      pointer-events: none;
      animation-name: mainNavLinkLoading;
      animation-duration: $time;
      animation-timing-function: $easing;
      animation-fill-mode: forwards;
      &:before {
        animation-name: mainNavLinkBeforeLoading;
        animation-duration: $time;
        animation-timing-function: $easing;
        animation-fill-mode: forwards;
      }
    }
  }
}

.page-header {
  &__title {
    line-height: 1;
    font-size: 2.6rem;
    font-family: $font-accent;
    font-weight: $font-accent--weight;
  }
}

.page-nav {
  position: absolute;
  top: 0;
  padding-right: 2rem;
  transition: all $time $easing;
  &__item {
    position: relative;
    display: block;
    margin-left: -1.5rem;
  }
  &__link {
    position: relative;
    display: inline-block;
    line-height: 1;
    transition: transform $time-long $easing, color $time $easing, text-decoration-color $time $easing;
    transform: translate3d(-100%, 0, 0);
    &.loading {
      pointer-events: none;
      animation-name: pageNavLinkLoading;
      animation-duration: $time;
      animation-timing-function: $easing-in;
      animation-fill-mode: forwards;
    }
    &.active {
      color: $color-primary;
      text-decoration-color: transparent;
      font-weight: bold;
      pointer-events: none;
      animation-name: pageNavLinkActive;
      animation-duration: $time;
      animation-timing-function: $easing;
      animation-fill-mode: backwards;
    }
    &:after {
      display: block;
      content: attr(title);
      font-weight: bold;
      height: 0;
      overflow: hidden;
      visibility: hidden;
    }
  }
  &__description {
    display: block;
    padding-left: 1.5rem;
    font-size: 0.75rem;
    line-height: 1.4;
    margin-bottom: 0.5rem;
  }
  &--detail {
    .new-location & {
      .page-nav__item {
        animation-name: animateIn;
        animation-iteration-count: 1;
        animation-timing-function: $easing;
        animation-fill-mode: backwards;
        @for $i from 0 through 12 {
          &:nth-child(#{$i + 1}) {
            animation-delay: ($i - 1) * 0.0175s;
            animation-duration: 0.35s - ($i * 0.015s);
          }
        }
      }
    }
  }
  &--index {
    // This animation is for when you land on an index page, and to handle moving from an index to a details page
    .page-nav__item {
      animation-name: slideUpIn;
      animation-iteration-count: 1;
      animation-timing-function: $easing;
      animation-fill-mode: both;
      transition: all $time $easing;
      @for $i from 0 through 12 {
        &:nth-child(#{$i + 1}) {
          animation-delay: ($i - 1) * 0.03s;
          animation-duration: 0.35s - ($i * 0.015s);
        }
      }
    }
    .page-nav__link {
      transform: translate3d(1.5rem, 0, 0);
      .is-exiting & {
        transform: translate3d(-100%, 0, 0);
      }
      &.loading {
        animation-name: pageNavLinkLoadingIndex;
        animation-fill-mode: both;
      }
    }
  }
  &--exit-detail-animation:not(.page-nav--index) {
    // This animation is when changing from the details page of one section to another section
    animation-name: slideLeftOut;
    animation-iteration-count: 1;
    animation-timing-function: $easing-in;
    animation-fill-mode: both;
    animation-duration: $time;
    .page-nav__item {
      animation-name: slideLeftOut;
      animation-iteration-count: 1;
      animation-timing-function: $easing;
      animation-fill-mode: both;
      $maxChildren: 12;
      @for $children from 1 to $maxChildren {
        @for $i from 0 through $children {
          &:nth-child(#{$i + 1}):nth-last-child(#{$children - ($i - 1)}) {
            animation-delay: ($time * 0.75) - ($i * ($time / $children));
            animation-duration: $time * 0.75;
          }
        }
      }
    }
  }
  &--exit-index-animation:not(.page-nav--detail) {
    // This animation is when changing from the index page of one section to another section
    animation-name: slideDownOut;
    animation-iteration-count: 1;
    animation-timing-function: $easing-in;
    animation-fill-mode: both;
    animation-delay: 0;
    animation-duration: $time;
    .page-nav__item {
      animation-name: slideDownOut;
      animation-iteration-count: 1;
      animation-timing-function: $easing;
      animation-fill-mode: both;
      $maxChildren: 12;
      @for $children from 1 to $maxChildren {
        // This SCSS adjusts the animation timing based on the number of elements in the nav
        @for $i from 0 through $children {
          &:nth-child(#{$i + 1}):nth-last-child(#{$children - ($i - 1)}) {
            animation-delay: ($time * 0.75) - ($i * ($time / $children));
            animation-duration: $time * 0.75;
          }
        }
      }
    }
    .page-nav__link {
      transform: translate3d(1.5rem, 0, 0);
    }
  }
  $pages: sign,
  modality,
  element,
  home,
  polarity;
  @each $page in $pages {
    &--#{$page}.page-nav--detail {
      // Play the page nav (details page) exit animation when changing site sections (from a detail page)
      body:not([data-location='#{$page}']) .is-exiting & {
        @extend .page-nav--exit-detail-animation;
      }
    }
    &--#{$page}.page-nav--index {
      // Play the page nav (index page) exit animation when changing site sections (from an index page)
      body:not([data-location='#{$page}']) .is-exiting & {
        @extend .page-nav--exit-index-animation;
      }
    }
  }
}
}